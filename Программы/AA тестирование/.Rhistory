# Время работы функии
tic()
pb <- txtProgressBar(min = 0, max = K, style = 3)
tests <- list()
# modelFlow <- usersFlow(K = k, N = n, pA = 0.1, pB = 0.1)
# modelFlow <- usersFlow(K = k, N = n)
modelFlow <- usersFlow()
for (i in 1 : K) {
tests[i] <- list(chiTest(ksi = unlist(modelFlow$flow[[1]]),
eta = unlist(modelFlow$flow[[i]])))
setTxtProgressBar(pb, i)
}
pVal <- lapply(tests, function(x) {unlist(x[1])})
falsePositive <- length(which(unlist(rbind(pVal)) < alpha))
fPRate <- falsePositive / K
plot(sort(unlist(rbind(pVal))), type = 'p')
abline(h = alpha, col = 'red')
close(pb)
toc()
return(list("pVal" = pVal, "FPR" = fPRate))
}
workHorse(20, n)
workHorse <- function(K = k, N = n) {
# Время работы функии
tic()
pb <- txtProgressBar(min = 0, max = K, style = 3)
tests <- list()
# modelFlow <- usersFlow(K = k, N = n, pA = 0.1, pB = 0.1)
# modelFlow <- usersFlow(K = k, N = n)
modelFlow <- usersFlow()
for (i in 1 : K) {
tests[i] <- list(chiTest(ksi = unlist(modelFlow$flow[[1]]),
eta = unlist(modelFlow$flow[[i]])))
setTxtProgressBar(pb, i)
}
pVal <- lapply(tests, function(x) {unlist(x[1])})
falsePositive <- length(which(unlist(rbind(pVal)) < alpha))
fPRate <- falsePositive / K
plot(sort(unlist(rbind(pVal))), type = 'p')
abline(h = alpha, col = 'red')
close(pb)
toc()
return(list("pVal" = pVal, "FPR" = fPRate))
}
workHorse <- function(K = k, N = n) {
# Время работы функии
tic()
pb <- txtProgressBar(min = 0, max = K, style = 3)
tests <- list()
# modelFlow <- usersFlow(K = k, N = n, pA = 0.1, pB = 0.1)
modelFlow <- usersFlow(K, N)
# modelFlow <- usersFlow()
for (i in 1 : K) {
tests[i] <- list(chiTest(ksi = unlist(modelFlow$flow[[1]]),
eta = unlist(modelFlow$flow[[i]])))
setTxtProgressBar(pb, i)
}
pVal <- lapply(tests, function(x) {unlist(x[1])})
falsePositive <- length(which(unlist(rbind(pVal)) < alpha))
fPRate <- falsePositive / K
plot(sort(unlist(rbind(pVal))), type = 'p')
abline(h = alpha, col = 'red')
close(pb)
toc()
return(list("pVal" = pVal, "FPR" = fPRate))
}
workHorse(20, n)
workHorse <- function(K = k, N = n, ...) {
# Время работы функии
tic()
pb <- txtProgressBar(min = 0, max = K, style = 3)
tests <- list()
modelFlow <- usersFlow(K, N, pA = pksi, pB = peta)
# modelFlow <- usersFlow(K, N)
# modelFlow <- usersFlow()
for (i in 1 : K) {
tests[i] <- list(chiTest(ksi = unlist(modelFlow$flow[[1]]),
eta = unlist(modelFlow$flow[[i]])))
setTxtProgressBar(pb, i)
}
pVal <- lapply(tests, function(x) {unlist(x[1])})
falsePositive <- length(which(unlist(rbind(pVal)) < alpha))
fPRate <- falsePositive / K
plot(sort(unlist(rbind(pVal))), type = 'p')
abline(h = alpha, col = 'red')
close(pb)
toc()
return(list("pVal" = pVal, "FPR" = fPRate))
}
workHorse(20, n, pksi, peta)
workHorse(20, n, pksi, peta)
workHorse(20, n, pksi, peta)
modelFlow
a
a <- workHorse(20, n, pksi, peta)
a$pVal
a$FPR
a <- list()
a <- workHorse(20, n, pksi, peta)
a[1] <- workHorse(20, n, pksi, peta)
a <- list()
a[1] <- workHorse(20, n, pksi, peta)
a <- list()
a[[1]] <- workHorse(20, n, pksi, peta)
workHorse <- function(K = k, N = n, ...) {
# Время работы функии
tic()
pb <- txtProgressBar(min = 0, max = K, style = 3)
tests <- list()
modelFlow <- usersFlow(K, N, pA = pksi, pB = peta)
# modelFlow <- usersFlow(K, N)
# modelFlow <- usersFlow()
for (i in 1 : K) {
tests[i] <- list(chiTest(ksi = unlist(modelFlow$flow[[1]]),
eta = unlist(modelFlow$flow[[i]])))
setTxtProgressBar(pb, i)
}
pVal <- lapply(tests, function(x) {unlist(x[1])})
falsePositive <- length(which(unlist(rbind(pVal)) < alpha))
fPRate <- falsePositive / K
plot(sort(unlist(rbind(pVal))), type = 'p')
abline(h = alpha, col = 'red')
flowLength <- lapply(modelFlow, length)
close(pb)
toc()
return(list("pVal" = pVal, "FPR" = fPRate, "flowLength" = flowLength))
}
a <- workHorse(20, n, pksi, peta)
a$flowLength
workHorse <- function(K = k, N = n, ...) {
# Время работы функии
tic()
pb <- txtProgressBar(min = 0, max = K, style = 3)
tests <- list()
modelFlow <- usersFlow(K, N, pA = pksi, pB = peta)
# modelFlow <- usersFlow(K, N)
# modelFlow <- usersFlow()
for (i in 1 : K) {
tests[i] <- list(chiTest(ksi = unlist(modelFlow$flow[[1]]),
eta = unlist(modelFlow$flow[[i]])))
setTxtProgressBar(pb, i)
}
pVal <- lapply(tests, function(x) {unlist(x[1])})
falsePositive <- length(which(unlist(rbind(pVal)) < alpha))
fPRate <- falsePositive / K
plot(sort(unlist(rbind(pVal))), type = 'p')
abline(h = alpha, col = 'red')
flowLength <- lapply(modelFlow, function(x) length(x[[1]]))
close(pb)
toc()
return(list("pVal" = pVal, "FPR" = fPRate, "flowLength" = flowLength))
}
a <- list()
a <- workHorse(20, n, pksi, peta)
a$flowLength
getwd()
setwd("d:/D/AB/Программы/AA тестирование")
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
a$pValMultiple
a$testsMultiple[1]
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
a$testsMultiple[1][1]
a$testsMultiple[[1]][1]
a$testsMultiple[[1]][1][1]
a$testsMultiple[[1]][[1]][1]
a$testsMultiple[[1]][[1]][[1]]
a$testsMultiple
matrix(a$testsMultiple, k, k)
print(matrix(a$testsMultiple, k, k))
matrix(a$testsMultiple, k, k)[[1]][[1]][[1]]
matrix(a$testsMultiple, k, k)[[1]]
matrix(a$testsMultiple[[1]], k, k)
matrix(a$testsMultiple[[1]][[1]], k, k)
a$pValMultiple
a$testsMultiple[[1]]
a$testsMultiple[[1]][[1]]
a$testsMultiple[[1]][[1]]$pVal
a$testsMultiple[[5]][[5]]$pVal
a$testsMultiple[[5]][[3]]$pVal
a$testsMultiple[[5]][[4]]$pVal
dim(a$testsMultiple)
b
b <-matrix()
b
for (i in 1 : k) {
for (j in 1 : k) {
b[i, j] <- a$testsMultiple[[i]][[j]]$pVal
}
}
k
i
j
a$testsMultiple[[i]][[j]]$pVal
b[i, j] <- 0
b <-matrix(NA, k, k)
b
b <-matrix(NA, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[i, j] <- a$testsMultiple[[i]][[j]]$pVal
}
}
for (i in 1 : k) {
for (j in 1 : k) {
# b[i, j] <- a$testsMultiple[[i]][[j]]$pVal
print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b <-matrix(NA, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[i, j] <- unlist(a$testsMultiple[[i]][[j]]$pVal)
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
for (i in 1 : k) {
for (j in 1 : k) {
# b[i, j] <- a$testsMultiple[[i]][[j]]$pVal
print(unlist(a$testsMultiple[[i]][[j]]$pVal))
}
}
b <-matrix(NA, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[i, j] <- a$testsMultiple[[i]][[j]]$pVal
print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b <-matrix(NULL, k, k)
b
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b
c <- 0
c[1] <- 1
c[2] <- 1
c
c <- 0
for (i in 1 : k) {
for (j in 1 : k) {
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
c[i*j] <- a$testsMultiple[[i]][[j]]$pVal
print(a$testsMultiple[[i]][[j]]$pVal)
}
}
for (i in 1 : k) {
for (j in 1 : k) {
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
i*j
# c[i*j] <- a$testsMultiple[[i]][[j]]$pVal
print(a$testsMultiple[[i]][[j]]$pVal)
}
}
for (j in 1 : k) {
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
i*j
# c[i*j] <- a$testsMultiple[[i]][[j]]$pVal
# print(a$testsMultiple[[i]][[j]]$pVal)
print(i*j)
}
for (i in 1 : k) {
for (j in 1 : k) {
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
i*j
# c[i*j] <- a$testsMultiple[[i]][[j]]$pVal
# print(a$testsMultiple[[i]][[j]]$pVal)
print(i*j)
}
}
d
d <- 1
c <- 0
d <- 1
for (i in 1 : k) {
for (j in 1 : k) {
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
c[d] <- a$testsMultiple[[i]][[j]]$pVal
d <- d + 1
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
c <- 0
d <- 1
for (i in 1 : k) {
for (j in 1 : k) {
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
# c[d] <- a$testsMultiple[[i]][[j]]$pVal
# d <- d + 1
class(a$testsMultiple[[i]][[j]]$pVal)
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
c <- 0
d <- 1
for (i in 1 : k) {
for (j in 1 : k) {
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
# c[d] <- a$testsMultiple[[i]][[j]]$pVal
# d <- d + 1
print(class(a$testsMultiple[[i]][[j]]$pVal))
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
for (i in 1 : k) {
for (j in 1 : k) {
# ifelse(is.null())
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
# c[d] <- a$testsMultiple[[i]][[j]]$pVal
# d <- d + 1
print(is.null((a$testsMultiple[[i]][[j]]$pVal)))
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)),
0,
a$testsMultiple[[i]][[j]]$pVal)
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
# c[d] <- a$testsMultiple[[i]][[j]]$pVal
# d <- d + 1
# print(is.null((a$testsMultiple[[i]][[j]]$pVal)))
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)),
'NA',
a$testsMultiple[[i]][[j]]$pVal)
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
# c[d] <- a$testsMultiple[[i]][[j]]$pVal
# d <- d + 1
# print(is.null((a$testsMultiple[[i]][[j]]$pVal)))
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)),
0,
a$testsMultiple[[i]][[j]]$pVal)
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
# c[d] <- a$testsMultiple[[i]][[j]]$pVal
# d <- d + 1
# print(is.null((a$testsMultiple[[i]][[j]]$pVal)))
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b
max(b)
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)) ||
i == j,
0,
a$testsMultiple[[i]][[j]]$pVal)
# b[j, i] <- a$testsMultiple[[i]][[j]]$pVal
# c[d] <- a$testsMultiple[[i]][[j]]$pVal
# d <- d + 1
# print(is.null((a$testsMultiple[[i]][[j]]$pVal)))
# print(a$testsMultiple[[i]][[j]]$pVal)
}
}
b
max(b)
a$pVal
unlist(a$pVal)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)) ||
i == j,
0,
a$testsMultiple[[i]][[j]]$pVal)
}
}
b
max(b)
a$testsMultiple[[1]][[1]][[1]]
a$testsMultiple[[1]][[1]]$pVal
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
a$testsMultiple[[1]][[1]][[1]]
a$testsMultiple[[1]][[1]]$pVal
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)) ||
i == j,
0,
a$testsMultiple[[i]][[j]]$pVal)
}
}
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)) ||
i == j,
0,
a$testsMultiple[[i]][[j]]$pVal)
}
}
a$testsMultiple
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)) ||
i == j,
0,
a$testsMultiple[[i]][[j]]$pVal)
}
}
b
a$testsMultiple
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
b <-matrix(0, k, k)
for (i in 1 : k) {
for (j in 1 : k) {
b[j, i] <- ifelse(is.null((a$testsMultiple[[i]][[j]]$pVal)) ||
i == j,
0,
a$testsMultiple[[i]][[j]]$pVal)
}
}
b
max(b)
which(b == max(b))
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
a$pValMultiple
max(a$pValMultiple)
a$pVal
unlist(a$pVal)
as.data.frame(unlist(a$pVal))
data.frame(unlist(a$pVal))
data.frame(unlist(a$pVal), names = c("pVal"))
as.data.frame(unlist(a$pVal), names = c("pVal"))
?as.data.frame()
as.data.frame(unlist(a$pVal), col.names = c("pVal"))
as.data.frame(unlist(a$pVal), col.names = "pVal")
as.data.frame(unlist(a$pVal), row.names = "pVal")
as.data.frame(unlist(a$pVal), row.names = c("pVal"))
as.data.frame(unlist(a$pVal), col.names = c("pVal"))
sapply(a$pVal, unlist)
lapply(a$pVal, unlist)
unlist(a$pVal)
sapply(a$pVal, unlist)
sapply(a$pVal, length)
lapply(a$pVal, length)
sapply(a, length)
lapply(a, length)
sapply(a, length)
sapply(a, length)
a$testsMultiple
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
a$testsMultiple
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
matrix(0, K, K-1)
matrix(0, k, k-1)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
source('D:/D/AB/Программы/AA тестирование/AA.R', echo=TRUE)
unlist(a$pVal, use.names = FALSE)
sapply(a, unlist)
sapply(a$pVal, unlist)
sapply(a$pVal, unlist, use.names = FALSE)
unlist(a$pVal, use.names = FALSE)
unlist(a$pVal)
unlist(a, use.names = FALSE)
unlist(a$pValMultiple, use.names = FALSE)
a$pValMultiple
a$testsMultiple
unlist(a$testsMultiple, use.names = FALSE)
a$testsMultiple
unlist(a$testsMultiple, use.names = FALSE)
a$FPR
a$FPRB
a$testsMultiple
unlist(a$testsMultiple)
unlist(a$testsMultiple)[1]
unlist(a$testsMultiple)[1][2]
unlist(a$testsMultiple)$pVal
unlist(a$testsMultiple)[2]
unlist(a$testsMultiple)
unlist(a$pVal)
sapply(a$pVal, unlist, use.names = FALSE)
sapply(a$pVal, leghts)
sapply(a$pVal, length)
sapply(a, length)
